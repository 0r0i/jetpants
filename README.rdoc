= Jetpants

== OVERVIEW:

\Jetpants is an automation toolkit for handling monstrously large MySQL database topologies. It is geared towards common operational tasks like cloning slaves, rebalancing shards, and performing master promotions. It features a command suite for easy use by operations staff, but it's also a full Ruby library for use in developing custom data migration scripts and database automation.

== MOTIVATION:

\Jetpants was created by {Tumblr}[http://www.tumblr.com/] to help manage our database infrastructure. It handles automation tasks for our entire database topology, which as of May 2012 consists of approximately:
* 200 dedicated database servers
* 12 global (unsharded) functional pools 
* 45 shard pools
* 20 terabytes total of unique data on masters
* 50 billion total unique rows on masters

One of the primary requirements for \Jetpants was speed. On our hardware, <b>\Jetpants can divide a 700GB, billion-row shard in half in about six hours</b> -- or even faster if you're diving into thirds or fourths. It can also <b>clone slaves at line speed on gigabit ethernet</b>, including to multiple destinations at once, using a novel "chained copy" approach.

For more background on the initial motivations behind \Jetpants, please see {Evan Elias's presentation at Velocity Europe 2011}[http://assets.en.oreilly.com/1/event/74/Massively%20Sharded%20MySQL%20at%20Tumblr%20Presentation.pdf].

== COMMAND SUITE FEATURES:

The \Jetpants command suite offers easy command-line interaction with complex MySQL automation tasks.

* Clone slaves efficiently, including to multiple targets simultaneously
* Split a range-based shard into N new shards with zero downtime and no failed queries
* Perform master promotions and other pool topology changes in a clean manner
* Rebuild tables in parallelized chunks, for defragmentation or fast schema changes
* Interact with your database topology in a REPL environment via <tt>jetpants console</tt> mode

Run the <tt>jetpants</tt> executable with no options to see a list of supported commands and their syntax. For more thorough descriptions of the commands, please see {doc/commands.rdoc}[link:doc/commands_rdoc.html].

== LIBRARY FEATURES:

\Jetpants is also a Ruby module which you can use to build complex database migration scripts and other customized automation. It provides a flexible class system providing clean object modeling of databases, hosts, global/functional pools, sharded pools, and your database topology as a whole.

* Utilize scriptable versions of all command suite functionality
* Crawl replication topology programmatically
* Import or export arbitrary portions of a data set
* Copy large files quickly and efficiently, including to multiple simultaneous destinations
* Manipulate server settings or concurrently execute arbitrary UNIX commands / administrative MySQL queries on multiple servers


== ASSUMPTIONS AND REQUIREMENTS:

The base classes of \Jetpants currently make a number of assumptions about your environment and database topology. Please see {doc/requirements.rdoc}[link:doc/requirements_rdoc.html].


== CONFIGURATION:

\Jetpants supports a global configuration file at /etc/jetpants.yaml, as well as per-user configuration files at ~/.jetpants.yaml.

At least one of these files must exist for Jetpants to function properly, since certain options (database schema name, database credentials, etc) are mandatory and cannot be inferred.

Please see {doc/configuration.rdoc}[link:doc/configuration_rdoc.html] for information on configuring \Jetpants.


== PLUGINS:

\Jetpants offers an extensible plugin system. Plugins are Ruby code (such as stand-alone gems) that add to \Jetpants by supplying callback methods, and/or overriding core methods.

It is highly recommended that you tie \Jetpants into your site's asset tracker / hardware management system by writing a custom plugin. This will allow Jetpants to automatically know what database pools and shards are present, and to make topological changes immediately be reflected in your site's configuration.

We supply a sample plugin called simple_tracker, demonstrating how to go about writing a very basic asset-tracking plugin. This plugin just stores database topology information to a YAML file, and writes live production configuration to a second YAML file. This isn't actually suitable for production use, but should provide a reasonable starting point for learning the system.

Other recommended uses of plugins include integration with your site's monitoring and trending systems, and environment-specific overrides to various core methods.

For more information on how to write plugins and use the jetpants::callback system, please see {doc/plugins.rdoc}[link:doc/plugins_rdoc.html]

== CREDITS:

* <b>Evan Elias</b>: Lead developer. Core class implementations, shard split logic, plugin system
* <b>Dallas Marlow</b>: Master promotion logic, command suite and console structure, MySQL internals expertise

== LICENSE:

Copyright 2012 Tumblr, Inc

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.